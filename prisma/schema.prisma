// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

//model for store
model Store {
  id       String @id @default(uuid())
  name     String
  userId   String
  ///relation works like keys in normal mySql databases so we are relating this billboard to the poarent stores using relation
  billboards Billboard[] @relation("StoreToBillboard")
  categories Category[] @relation("StoreToCategory")
  sizes Size[] @relation("StoreToSize")
  colors Color[] @relation("StoreToColor")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//we create a mdoel for our billboard
model Billboard {
  id String @id @default(uuid())
  storeId String
  ///this store property is tageting the filed storeIds and referening the id in the store
  store Store @relation("StoreToBillboard", fields: [storeId], references: [id])
  label String
  imageUrl String
  Categories Category[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId]) ///to fix the warning of the store relation using an index declarator 
}


///create a new Model for Categories 
model Category{
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String 
  billboard Billboard @relation(fields: [billboardId], references: [id])
  name String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


///to fix the errors that come with relating the store and billboard Id TO THE MODEL 
  @@index([storeId])
  @@index([billboardId])
}


///Model for Sizes 
model Size {
  id String @id @default(uuid())
  storeId String 
  store Store @relation("StoreToSize", fields: [storeId], references: [id])
  name String
  value String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

///Model for Colors
model Color {
  id String @id @default(uuid())
  storeId String 
  store Store @relation("StoreToColor", fields: [storeId], references: [id])
  name String
  value String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}